# -*- yaml -*-

# This apps.yaml file is used to configure how your application is deployed,
# executed, and monitored.

# You can specify one or more applications in this file. The application, with a
# given project in a given environment, is the unit of Jarvis scheduling.

nitro: # this is the application name
  baseImage: fuji # python requires the fuji base image rather than gala

  # This attribute specifies the use of customized logging options.
  # If not specified, application logs will be forwarded to the orchard index in PIE Splunk.
  # The orchard index in PIE Splunk is accessible to all Apple employees, thus any log data
  # by default can be viewed by all Apple employees.
  logging:
    # This attribute is mandatory whenever the logging attribute is in use. It provides the
    # logical name of the Splunk cluster to be used.
    # 
    # List of supported Splunk clusters: https://docs.pie.apple.com/compute/compute-guide.html#including-attributes
    splunkCluster: 'pie'

    # This attribute is mandatory if the logging attribute is in use. It defines the index
    # name in your Splunk cluster.
    splunkIndexName: 'orchard'

  processes:
    # Processes. You can one or more processes per app, all of which will be
    # scheduled together. Processes correspond to Orchard's instance types.
    web:
      # Values are specified as either MiB or GiB (spaces between the number and unit are optional).
      # The units MB and GB can also be used, but will be interpreted as MiB (2^20 bytes) or GiB (2^30 bytes).
      # For example, these are equivalent: 512 MB, 512 MiB, 512MB, 512MiB
      memory: 512 MiB

      # Optional... if defined, processes of a tier will be launched together.
      # Processes of lower-numbered tiers must reach capacity before
      # higher-numbered tiers can launch.  Any processes with no startupTier set
      # are implicitly set to `1`.
      startupTier: 1

      # Optional... default is "service", which means it's long running and
      # should be relaunched if it fails.  "startup" means it's expected to run
      # once and finish. The "startup" tasks run before any "service" tasks,
      # regardless of tier, and must all finish successfully before any service
      # tasks can start.
      startupType: service

      # How to start this type of process
      command: npm run kickstart

      # Actual number is exposed as env var: PORT_PUBLIC, PORT_ADMIN, etc.
      # This is an array because order matters... the first is also aliased to
      # PORT and PORT0, the second is PORT1, etc.  Most frameworks preserve
      # order in hashes, but we can't always rely on that.
      listeners:
        - name: public        # this will be exposed as PORT_PUBLIC as well as PORT and PORT0.
          loadBalancer: true  # true means we'll get a "VIP" (nice DNS name) assigned to this listener

      health:
        # Supported types of health checks: http and command
        type: http
        path: /__health
        expect: 200 # returning anything other than this and the app will be deemed "unhealthy"
        # Which listener is responsible for the health check
        # Not required for a command-based health check
        listener: public

        # These are in the command health check too.  These are defaults, so they're optional if you're ok with them.
        interval: 10           # Run every 10 seconds
        consecutiveFailures: 3 # how many failures in a row before it's actually determined unhealthy
                               # (in this case: 10 * 3 = 30 seconds of repeated failures)
        gracePeriod: 300       # how long (in seconds) we let health checks fail during initial startup
                               # (before the first passed check), i.e., we'll let the app be unhealthy
                               # for this amount of time upon startup before considering it truly unhealthy

